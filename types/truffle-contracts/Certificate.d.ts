/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CertificateContract
  extends Truffle.Contract<CertificateInstance> {
  "new"(
    _certificatesManager: string,
    _faculty: string,
    _institution: string,
    _degree: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<CertificateInstance>;
}

type AllEvents = never;

export interface CertificateInstance extends Truffle.ContractInstance {
  degree(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  faculty(txDetails?: Truffle.TransactionDetails): Promise<string>;

  institution(txDetails?: Truffle.TransactionDetails): Promise<string>;

  status(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  reject: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  approve: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  editable(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    degree(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    faculty(txDetails?: Truffle.TransactionDetails): Promise<string>;

    institution(txDetails?: Truffle.TransactionDetails): Promise<string>;

    status(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    reject: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    approve: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    editable(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
